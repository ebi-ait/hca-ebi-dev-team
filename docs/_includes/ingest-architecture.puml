@startuml
!theme vibrant

'skinparam linetype polyline
'skinparam linetype ortho

!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master
!includeurl ICONURL/devicons/python.puml
!includeurl ICONURL/devicons/java.puml
!includeurl ICONURL/devicons/mongodb.puml
!includeurl ICONURL/devicons/angular.puml
!includeurl ICONURL/devicons/google_cloud_platform.puml
!includeurl ICONURL/devicons/aws.puml
!includeurl ICONURL/devicons/nodejs.puml

sprite $rabbitmq [24x24/16] {
000000000000000000000000
0000ffff0000ffff00000000
0000ffff0000ffff00000000
0000ffff0000ffff00000000
0000ffff0000ffff00000000
0000ffff0000ffff00000000
0000ffff0000ffff00000000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
0000ffffffff0000ffff0000
0000ffffffff0000ffff0000
0000ffffffff0000ffff0000
0000ffffffff0000ffff0000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
0000ffffffffffffffff0000
}

together {
    actor stakeHolder
    actor Submitter
    actor systemOperator
}

together {
    component HCAProjectCatalogue <<$angular>> [[https://github.com/ebi-ait/projects-index]]
    component ui <<$angular>> [[https://github.com/ebi-ait/ingest-ui]]
}



package ingestCore {
    component broker <<$python>> [[https://github.com/ebi-ait/ingest-broker]]
    component core <<$java>> [[https://github.com/ebi-ait/ingest-core]]
    database MongoDB
    queue RabbitMQ <<$rabbitmq>>
    component stateTracking <<$java>>
    component stagingManager <<$python>>
}
package submission {
    component hcaUtil
    storage UploadArea <<$aws>>
}

package validation {
    component graphValidator <<$python>> [[https://github.com/ebi-ait/ingest-graph-validator]]
    component validator <<$nodejs>> [[https://github.com/ebi-ait/ingest-validator]]
    database Neo4J
}
together {
    package archiving {
        component exporter <<$python>> [[https://github.com/ebi-ait/ingest-exporter]]
        component archiver <<$python>> [[https://github.com/ebi-ait/ingest-archiver]]
        component sceaArchiver <<$python>>
    }
    package downstream {
        package "EBIArchives" {
            component ENA
            component BioSamples
            component BioStudies
            component SCEA
        }
        component "terra" <<$google_cloud_platform>>
    }
}
package uploadService {
    component ValidationJob <<lambda>>
    component ChecksummingJob <<lambda>>
    component UploadAPI
}

Submitter -d-> hcaUtil
Submitter -d-> ui
archiver --> EBIArchives: submits data
archiver --> core : updates accessions
broker --> core : creates submission envelope and metadata
core --> MongoDB
core --> archiver: triggers
core -d-> RabbitMQ: triggers exporter
RabbitMQ -d-> exporter
core --> RabbitMQ: trigger graph validation
RabbitMQ -d-> graphValidator
core --> sceaArchiver
core --> stagingManager : sends submission events
core --> stateTracking : sendEvent
core --> RabbitMQ: trigger metadata validation
RabbitMQ -d-> validator
exporter --> terra: submits data
graphValidator -u-> core : "validation status"
graphValidator --> Neo4J
HCAProjectCatalogue --> core : fetch projects
hcaUtil -> UploadArea : syncs files
sceaArchiver -> SCEA
stagingManager --> UploadAPI : requests or upload area creation or clean-up
validator -> UploadAPI: requests file validation
UploadAPI -> ValidationJob
stakeHolder -d-> ui
stakeHolder -d-> HCAProjectCatalogue
stateTracking --> core : update submission status
systemOperator -r-> ui
UploadArea -> ChecksummingJob  : computes file checksum
ui --> broker : sends spreadsheet
validator -u-> core : "validation status"
ChecksummingJob -> core: notifies file is uploaded
ValidationJob -> core: sends validation result
@enduml